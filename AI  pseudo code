class AI_Example:
	init(depth, evaluate_func):
		this.depth = depth
		this.evaluate_func = evaluate_func

	getNextMove(game):
		max = -∞
		for move in game.getPossibleMoves():
			game.makeMove(move)
			score = minimax(game, this.depth - 1, -∞, +∞, false)
			game.undo()
			if score > max:
				max = score
				bestMove = move
		return bestMove

	minimax(game, depth, α, β, isMaximising): // minimax with alpha-beta puring
		if depth = 0:
			boardEvaluation = this.evaluate_func(game.getBoard())
			return isMaximising ? boardEvaluation : -boardEvaluation
		temp = isMaximising ? -∞ : +∞
		for move in game.getPossibleMoves():
			game.makeMove(move)
			score = minimax(game, depth - 1, !ismaximising)
			game.undo()
			if isMaximizing:
				if score > temp:
					temp = score
				α = max(score, α)
			else:
				if temp < score:
					temp = score
				β = min(score, β)
			if α >= β:
				break
		return temp
