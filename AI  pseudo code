class AI_Example:
	init(depth, evaluate_func):
		this.depth = depth
		this.evaluate_func = evaluate_func
	
	getNextMove(game):
		return minimax(game, this.depth)

	getBestMove(game, depth): // gonna add alpha-beta puring soon and maybe combine the mini and maxi functions.
		if depth = 0:
			raise error("can't find move with depth = 0")
		max = -oo
		for move in game.getPossibleMoves():
			game.makeMove(move)
			score = minimax(game, depth - 1, false)
			game.undo()
			if score > max:
				max = score
				bestMove = move
		return bestMove

	minimax(game, depth, isMaximising):
		if depth = 0:
			boardEvaluation = this.evaluate_func(game.getBoard())
			return isMaximising ? boardEvaluation : -boardEvaluation
		temp = isMaximising ? -oo : +oo
		for move in game.getPossibleMoves():
			game.makeMove(move)
			score = minimax(game, depth - 1, !ismaximising)
			game.undo()
			if (isMaximising ? score : -score) > temp:
				temp = score
		return temp
